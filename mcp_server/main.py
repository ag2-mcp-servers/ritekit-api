# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:00:36+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query

from models import Tags

app = MCPProxy(
    description='RiteKit API is based on REST principles.\n\nAuthentication uses standard OAuth 2.0 process\n\n##Getting started\n\n1. Sign up for [RiteKit](https://ritekit.com/)\n\n1. Go to [developer dashboard](https://ritekit.com/developer/dashboard/)\n\n1. Click "Create a token" button to get your **Client ID** and **Client secret**\n\n1. When you reach your free limit of calls per month, [upgrade to paid tiers](https://ritekit.com/developer/)\n\n## Options for authorizing API Calls\n\n#### Using Client ID directly\n\nYou can directly connect to our API using your **client ID** by sending it as a GET query parameter. This option is simple (no need for oAuth) but it should be used only in case the Client ID is not exposed publicly.\n\nGET  https://api.ritekit.com/v1/stats/multiple-hashtags?tags=php&client_id=292c6912e7710c838347ae178b4a',
    title='RiteKit API',
    version='1.0.0',
    servers=[{'url': 'https://api.ritekit.com'}],
)


@app.get(
    '/v1/emoji/auto-emojify',
    description=""" Returns text of the post with emoji added """,
    tags=['emoji_management'],
)
def auto__emojify(text: str):
    """
    Auto-Emojify
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/emoji/suggestions',
    description=""" Returns list of emoji suggestions for a given text of the post """,
    tags=['emoji_management'],
)
def emoji__suggestions(text: str):
    """
    Emoji Suggestions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/images/animate',
    description=""" Returns URL of an animated GIF. """,
    tags=['image_animation'],
)
def animate__image(url: str, type: str = ...):
    """
    Animate Image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/images/logo',
    description=""" Returns a company logo based on website domain. If the logo is not in our database yet, it will be extracted from the site on the fly. White logo background is automatically removed to make the logo look better on color backgrounds.

Note: It is not possible to access our company logo API publicly without authentication. If you wish to do so, you have to create proxy on your own server that calls our API from the server side. """,
    tags=['company_branding'],
)
def company__logo(domain: str):
    """
    Company Logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/images/quote',
    description=""" Returns URL of an image created from text according to given style parameters """,
    tags=['image_animation', 'company_branding'],
)
def text_to__image(
    quote: str,
    author: str = ...,
    font_size: int = Query(..., alias='fontSize'),
    quote_font: str = Query(..., alias='quoteFont'),
    quote_font_color: str = Query(..., alias='quoteFontColor'),
    author_font: str = Query(..., alias='authorFont'),
    author_font_color: str = Query(..., alias='authorFontColor'),
    enable_highlight: int = Query(..., alias='enableHighlight'),
    highlight_color: str = Query(..., alias='highlightColor'),
    bg_type: str = Query(..., alias='bgType'),
    background_color: str = Query(..., alias='backgroundColor'),
    gradient_type: str = Query(..., alias='gradientType'),
    gradient_color1: str = Query(..., alias='gradientColor1'),
    gradient_color2: str = Query(..., alias='gradientColor2'),
    brand_logo: str = Query(..., alias='brandLogo'),
    animation: str = ...,
    show_quote_mark: Optional[int] = Query(None, alias='showQuoteMark'),
):
    """
    Text to Image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/link/cta',
    description=""" Returns list of available CTA for current user. Requires each user to authenticate with RiteKit """,
    tags=['link_management'],
)
def list_of__c_t_as():
    """
    List of CTAs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/link/short-link',
    description=""" Returns a shorten link with a given CTA. """,
    tags=['link_management'],
)
def shorten__link(url: str, cta: int = ...):
    """
    Shorten Link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/search/trending',
    description=""" Returns list of hashtags currently trending on Twitter """,
    tags=['hashtag_management'],
)
def trending__hashtags(green: Optional[bool] = '1', latin: Optional[bool] = '1'):
    """
    Trending Hashtags
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/stats/auto-hashtag',
    description=""" Returns auto-hashtagged text of the post. """,
    tags=['hashtag_management'],
)
def auto__hashtag(
    post: str,
    max_hashtags: Optional[int] = Query(2, alias='maxHashtags'),
    hashtag_position: Optional[str] = Query('auto', alias='hashtagPosition'),
):
    """
    Auto-Hashtag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/stats/hashtag-suggestions',
    description=""" Returns list of hashtag suggestions for a single-word topic or a shorter text up to 1000 characters. Takes into account both semantic relevancy and real-time hashtag popularity. """,
    tags=['hashtag_management'],
)
def hashtag__suggestions(text: str):
    """
    Hashtag Suggestions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/stats/history/{hashtag}',
    description=""" Returns historical stats for a given hashtag from the last 30 days """,
    tags=['hashtag_management'],
)
def hashtag__history(hashtag: str):
    """
    Hashtag History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/stats/multiple-hashtags',
    description=""" Returns real-time stats for up to 100 hashtags (updated hourly). """,
    tags=['hashtag_management'],
)
def hashtag__stats(tags: Tags):
    """
    Hashtag Stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/instagram/hashtags-cleaner',
    description=""" Remove banned hashtags before posting to Instagram """,
    tags=['hashtag_management'],
)
def hashtags_cleaner(post: str):
    """
    Hashtags cleaner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
